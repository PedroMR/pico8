pico-8 cartridge // http://www.pico-8.com
version 18
__lua__
-- ship
draw_bb=false
local scr={x0=0,x1=127,y0=0,y1=111}
local pl={x=60,y=60,w=8,h=6,tw=2,th=2,spr=20,dead=false}
pl.w2=pl.w/2 pl.h2=pl.h/2
local cam={x=0,y=0}
local m_offs_x=192
local pl_bul={}
local pl_shot=10
local ene_shp={}
local state='start'
local vfx={}
-- vfx
local vfx_boom={tw=1,th=1,fr={5,6},tpf=6}
-- paths
local p_ene1={{0,0},{-140,0},{-50,20},{-180,20}}


function _update()
 if state=='start' then
  upd_start()
 else
  upd_game()
 end
end

function _draw()
 if state=='start' then
  draw_start()
 else
  draw_game()
 end
end

function upd_start()
 if btnp(4) then
  sfx(0)
  state='game'
 end
end

path1={{10,10},{130,30},{10,50},{130,50}}
function p_eval(p, t)
	t=max(0,min(1,t))
 local n=#p-1 -- fences not poles
 local dt=1/n
 local s=flr(t/dt)
--cls() print("s:"..s.." t:"..t.." n:"..n)  
 local s0=p[s+1]
 local s1=p[s+2]
 if (s1==nil) return {x=s0[1],y=s0[2]}
 local ⧗=1-((t%dt)/dt)
 local pos={x=⧗*s0[1]+(1-⧗)*s1[1],
												y=⧗*s0[2]+(1-⧗)*s1[2]}
 return pos
end

function draw_path(p)
 for t=0,1.1,0.025 do
  local pos=p_eval(p,t)
  print('♥',pos.x,pos.y)
 end
end

function draw_start()
 camera()
 cls()
 color(7) 
 print("★ start game ★",30,80) 
 draw_path(path1)
end

local frame=0
function upd_game()
 frame+=1
 upd_cam()
 upd_ctrl()
 upd_obj()
 upd_spawn()
 upd_vfx()
end

function upd_vfx()
 for o in all(vfx) do
  cls()
 	if (not o.spr) or 
 	 (o.nf ~= nil and o.nf <= 0) then
   if #o.fr<1 then --over
    del(vfx,o)
   else
	 	 o.spr = o.fr[1]
	 	 del(o.fr,o.fr[1])
	 	 o.nf=o.tpf -- ticks per frame 	 
	  end
 	end
  o.nf-=1
 end
end

function upd_cam()
 local cam_spd=1
 cam.x += cam_spd
 if (cam_spd>0) upd_spawn()
 trymove(cam_spd,0) --drag pl
end

function upd_spawn()
 local ntx=flr((cam.x+128)/8)
 local nty0=flr(cam.y/8)
 for nty=nty0,nty0+16 do
	 local t=mgetoff(ntx,nty)
	 if band(fget(t),2)>0 then
--		 sfx(3)
	 	spawn(t,ntx-12,nty)
	 	spawn(t,ntx-8,nty)
	 	msetoff(ntx,nty,0)
	 end
	end
end

function spawn(t,tx,ty)
 local ne={x=tx*8+m_offs_x,y=ty*8,w=8,h=6,tw=2,th=2,spr=18,spd=-0.5,t=0,dt=0.01}
 ne.path=p_ene1
 if ne.y > 64 then
  --flip path
  ne.path=tools.deepassign(p_ene1)
  for p in all(ne.path) do
   p[2] = -p[2]
  end
 end
 ne.w2=ne.w/2 ne.h2=ne.h/2
 ne.sx=ne.x ne.sy=ne.y
 add(ene_shp,ne)
end

function upd_ctrl()
 pl_shot-=1
 local pl_spd=3 
 pl.spr=16
 if (btn(0)) trymove(-pl_spd,0)
 if (btn(1)) trymove( pl_spd,0)
 if (btn(2)) trymove(0,-pl_spd)
 if (btn(3)) trymove(0, pl_spd)
 if (btn(4)) tryshoot()
end

function tryshoot()
 if (pl_shot>0 or pl.dead) return
 pl_shot=16
 local nb={x=pl.x+8,y=pl.y,spd=4,
 	spr=2,tw=1,th=1,w=8,h=3
 } 
 nb.w2=nb.w/2 nb.h2=nb.h/2
 add(pl_bul,nb)

--[[
 local v=tools.deepassign(vfx_boom)
 v.x=nb.x v.y=nb.y
 add(vfx,v)
--]]

 sfx(1)
end

function trymove(dx,dy)
 local coll=false
 pl.x += dx pl.y += dy
 if(dy!=0) pl.spr=20
 if(dy>0) pl.spr=22
 if(dy<0) pl.spr=24
 
 local x0,x1=pl.x-pl.w/2,pl.x+pl.w/2
 local y0,y1=pl.y-pl.h/2,pl.y+pl.h/2
 -- world bounds
 if x0<cam.x+scr.x0 or x1>cam.x+scr.x1 or y0<cam.y+scr.y0 or y1>cam.y+scr.y1 then
  coll=true
 else
		if coll_m(x0,y0) or coll_m(x1,y0) 
		 or coll_m(x0,y1) or coll_m(x1,y1)
		then
			coll=true
		end  
 end
 
 if (coll)	 pl.x-=dx pl.y-=dy
 --pl.x=flr(pl.x) pl.y=flr(pl.y)
end

function upd_obj()
 for b in all(pl_bul) do
		b.x += b.spd
		if (b.x > cam.x+127) del(pl_bul,b)
 end
 for o in all(ene_shp) do
--		o.x += o.spd
  o.t+=o.dt
  local np=p_eval(o.path,o.t)  
--if(o.t>0.01) cls()print("t "..o.t.." sx "..o.sx.." np.x "..np.x)stop()
  o.x, o.y = o.sx+np.x, o.sy+np.y
		if(obj_coll(o,pl)) then
   mk_vfx(vfx_boom,o)
	  del(ene_shp,o)
	  kill_pl()
	  return
		end
	 for b in all(pl_bul) do
   if obj_coll(o,b) then
    mk_vfx(vfx_boom,o)
		  del(ene_shp,o)
		  del(pl_bul,b)
		  return
		 end
	 end
 end
end

function kill_pl()
 sfx(4)
 pl.dead=true
 for i=1,3 do
  local pos={x=pl.x+rnd(4)-2,y=pl.y+rnd(4)-2}
  local v=mk_vfx(vfx_boom,pos)
  v.tpf += rnd(4)-2
 end
end

function mk_vfx(v0,o)
 local v=tools.deepassign(v0)
 v.x=o.x v.y=o.y
 add(vfx,v)
 return v
end

function obj_coll(o1,o2)
 if o2.dead or o1.dead then return false end
 if (o1.x-o1.w2>o2.x+o2.w2) return false
 if (o1.x+o1.w2<o2.x-o2.w2) return false
 if (o1.y-o1.w2>o2.y+o2.h2) return false
 if (o1.y+o1.w2<o2.y-o2.h2) return false
 return true
end

function mgetoff(x,y)
 return mget(x-m_offs_x/8,y)
end

function msetoff(x,y,t)
 return mset(x-m_offs_x/8,y,t)
end

--collision check with tilemap
function coll_m(x,y)
 x,y=flr(x/8),flr(y/8)
 local t=mgetoff(x,y)
 local f=fget(t)
 if band(f,1)>0 then
  return true
 end
 
 return false
end

function draw_game()
 rectfill(scr.x0,scr.y0,scr.x1,scr.y1,1)
 dstars()
 camera(cam.x,cam.y)
 map(0,0,m_offs_x,0)
 if(not pl.dead) dspr(pl)
 for b in all(pl_bul) do
  dspr(b)
 end
 for o in all(ene_shp) do
  dspr(o)
 end
 for o in all(vfx) do 
  dspr(o)
 end
 camera()
-- local t=mgetoff(flr(pl.x/8),flr(pl.y/8))
-- print(flr(pl.x/8)..","..flr(pl.y/8).." -> "..t.." f: "..fget(t))
--cls() print(debug.tstr(vfx))
end

function r_pick(t)
 local i=flr(rnd(#t)+1)
 return t[i]
end

local stars={}
local s_c={7,7,12,10}
for i=1,100 do
 local s={x=rnd()*scr.x1,
  y=rnd()*scr.y1, c=r_pick(s_c),
  v=rnd(0.3)+0.03
  }
  if(rnd()>0.65) s.c=6 s.v=1
 add(stars,s)
end

function dstars()
 for s in all(stars) do
  pset(s.x,s.y,s.c)
  s.x -= s.v
  if (s.x < -1) s.x += 128
 end
end

function dspr(o)
 spr(o.spr,o.x-o.tw*4,o.y-o.th*4,o.tw,o.th)
 if draw_bb then
	 color(11)
	 rect(o.x-o.w/2,o.y-o.h/2,o.x+o.w/2,o.y+o.h/2)
 end
end
-->8
--tools
tools = {}
function tools.assign(t, initial)
 initial = initial or {}
 for k, v in pairs(t) do
  initial[k] = v
 end
 return initial
end
function tools.deepassign(t, initial)
 initial = initial or {}
 for k, v in pairs(t) do
  if type(v) == "table" then
   initial[k] = tools.deepassign(v)
  else
   initial[k] = v
  end
 end
 return initial
end

debug = {}
function debug.tstr(t, indent)
 indent = indent or 0
 local indentstr = ''
 for i=0,indent do
  indentstr = indentstr .. ' '
 end
 local str = ''
 for k, v in pairs(t) do
  if type(v) == 'table' then
   str = str .. indentstr .. k .. '\n' .. debug.tstr(v, indent + 1) .. '\n'
  else
   str = str .. indentstr .. tostr(k) .. ': ' .. tostr(v) .. '\n'
  end
 end
  str = sub(str, 1, -2)
 return str
end
function debug.print(...)
 printh("\n")
 for v in all{...} do
  if type(v) == "table" then
   printh(debug.tstr(v))
  elseif type(v) == "nil" then
    printh("nil")
  else
   printh(v)
  end
 end
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000900008000800000000000000000000000000000000000000000000000000000000000000000000000000000
0070070000000000000000000000ee00000000000090090000900990000000000000000000000000000000000000000000000000000000000000000000000000
0007700077700770000000000eeeedd000000500009aa000000aa000000000000000000000000000000000000000000000000000000000000000000000000000
00077000007777770088ac0000ddddd000888000008aa9800889a980000000000000000000000000000000000000000000000000000000000000000000000000
0070070000077000000000000eeeee00000005000809809000090000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000090900000008000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08a66666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
89aafffff666000000000ddddddd0000000666666000000000077777700000000005555550000000000000000000000000000000000000000000000000000000
0066fffffff666000000555ddd1dd00089aafffff666000089aafffff777000089aafffff5550000000000000000000000000000000000000000000000000000
00006fffffcff66600ddddddd11dddd00066ffffffff66600066ffffffff77000066ffffffff5500000000000000000000000000000000000000000000000000
000006ffffccff700000ddd1111dd000000006ffffccff70000006ffffccff70000006ffffccff50000000000000000000000000000000000000000000000000
00006fffffcff66600000ddddddd00000066ffffffff66600066ffffffff55500066ffffffff7750000000000000000000000000000000000000000000000000
0066fffffff66600000000000000000089aafffff666000089aafffff555000089aafffff7770000000000000000000000000000000000000000000000000000
89aafffff66600000000000000000000000666666000000000055555500000000007777770000000000000000000000000000000000000000000000000000000
08a66666600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666600000006666666666666666000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666660000000666666666666660000000660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666000000066666666666600000006660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666600000006666666666000000066660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666660000000666666660000000666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666000000066666600000006666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666600000006666000000066666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666660000000660000000666666660002c80000000000000000000000000000000000000000000000000000000000000000000000000000000000
__gff__
0000000000000000000000000000000000000202000000000000000000000000000002020000000000000000000000000000000000000000000000000000000001010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
4240404040404040404040404040404040404040404040404040404040404040404040404040404040404040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0042404040404040404040404040404043000000000000004240404040404040430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000424040430000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0012000000000000000000000012000000000000000000001200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000444040404041000000000000444040404041000000000000000000000000000044404040404100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000044404040404040410000000044404040404040410000000000000000000000004440404040404041000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4040404040404040404040404040404040404040404040404040404040404040404040404040404040404040404000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
000800001b5501b5501d5501f5502255022550225501f5501d5501d55022550225502255022550005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
000400001b1301d130000000000000000000000000000000000000000000000000000610000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000400000e0500d050141000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
000500001d5501a5501d5501855000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500005000050000500
011000001765016650196401963019620186101761014615166001760017600196000060000600006000060000600006000060000600006000060000600006000060000600006000060000600006000060000000
011000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
